import os
import sys
import json
import re  # Add this import for escaping special characters
from github_auth import authenticate_github
from github_pr import fetch_pull_request_details, fetch_pull_request_diff, post_inline_comments
from config_validator import load_config, validate_config
from prompt_generator import generate_review_prompt
from diff_analyzer import analyze_diff
from llm_wrapper import LLMWrapper
from logger import setup_logger

# Initialize logger
logger = setup_logger()

def main():
    """
    Main entry point for the review agent.
    """
    try:
        # Load and validate configuration
        config_path = os.path.join(os.path.dirname(__file__), "../config/config.yaml")
        config = load_config(config_path)
        validate_config(config)

        # Authenticate with GitHub
        github_token = os.getenv("GITHUB_TOKEN")
        if not github_token:
            logger.error("GITHUB_TOKEN environment variable is not set.")
            sys.exit(1)
        session = authenticate_github(github_token)

        # Extract pull request details from environment variables
        repo_name = os.getenv("GITHUB_REPOSITORY")
        pr_number = os.getenv("GITHUB_PR_NUMBER")
        if not repo_name or not pr_number:
            logger.error("GITHUB_REPOSITORY or GITHUB_PR_NUMBER environment variable is not set.")
            sys.exit(1)
        pr_number = int(pr_number)

        # Fetch pull request details and diff
        pr_details = fetch_pull_request_details(session, repo_name, pr_number)
        diff_details = fetch_pull_request_diff(session, repo_name, pr_number)

        # Analyze the diff
        analyzed_segments = analyze_diff(diff_details)

        # Generate review prompt
        repository_context = "Repository context is not yet implemented."  # Placeholder
        directives = config["directives"]
        prompt = generate_review_prompt(repository_context, diff_details, directives)
        print(f"Generated prompt: {prompt}")

        # Query the LLM
        llm_wrapper = LLMWrapper(config["llm_backends"], retry_attempts=3, retry_delay=2)
        llm_response = llm_wrapper.query(prompt, max_tokens=config["llm_parameters"]["max_tokens"])

        print(f"LLM response: {llm_response}")
        
        # Parse the LLM response
        llm_response_text = llm_response['output'][0]['content'][0]['text']
        if llm_response_text.startswith('```json'):
            llm_response_text = llm_response_text[7:]  # Remove the ```json prefix
        if llm_response_text.endswith('```'):
            llm_response_text = llm_response_text[:-3]  # Remove the ``` suffix
        llm_response_json = json.loads(llm_response_text.strip())

        # Escape quotes and special characters in the "content" field of each comment
        comments = llm_response_json.get("comments", [])
        for comment in comments:
            if "content" in comment:
                comment["content"] = re.sub(r'(["\\])', r'\\\1', comment["content"])  # Escape quotes and backslashes
                comment["content"] = re.sub(r'[\b\f\n\r\t]', lambda m: repr(m.group(0))[1:-1], comment["content"])  # Escape special characters

        if not comments:
            logger.warning("No comments generated by the LLM.")
            sys.exit(0)
        # # Post inline comments
        post_inline_comments(session, repo_name, pr_number, comments)

        logger.info("Pull request review completed sucessfully.")

    except Exception as e:
        logger.error(f"An error occurred during the review process: {e}")
        raise e

if __name__ == "__main__":
    main()
